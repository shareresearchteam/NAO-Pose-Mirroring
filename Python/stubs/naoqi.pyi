from typing import Literal, List, Union, Callable, Any

# mypy stub file for the naoqi module.
# Lets the mypy type checker reason about interactions with NAO.
# Add methods here as we need them.
# Note: Always import as `naoqi`. Some of the classes below don't technically exist.

# More about mypy stubs:
# https://mypy.readthedocs.io/en/stable/stubs.html

class ALAudioDevice:
    def muteAudioOut(self, mute: bool) -> None: ...
    def isAudioOutMuted(self) -> bool: ...
    def startMicrophonesRecording(self, filename: str) -> None: ...
    def stopMicrophonesRecording(self) -> None: ...
    def setOutputVolume(self, volume: int) -> None: ...

class ALAudioRecorder:
    def stopMicrophonesRecording(self) -> None: ...
    def startMicrophonesRecording(
        self,
        path: str,
        type: Union[Literal["wav"], Literal["ogg"]],
        hz: int,
        channels: List[int],
    ) -> None: ...

class ALBehaviorManager:
    def runBehavior(self, behavior: str) -> None: ...
    def startBehavior(self, behavior: str) -> None: ...
    def stopBehavior(self, behavior: str) -> None: ...
    def isBehaviorRunning(self, behavior: str) -> bool: ...
    def isBehaviorInstalled(self, behavior: str) -> bool: ...
    def getInstalledBehaviors(self) -> List[str]: ...

class ALAudioPlayer:
    def setMasterVolume(self, volume: float) -> None: ...
    def getLoadedFilesNames(self) -> List[str]: ...
    def loadFile(self, filename: str) -> int: ...
    def unloadAllFiles(self) -> None: ...
    def play(self, loadedJoke: int) -> None: ...
    def unloadFile(self, loadedJoke: int) -> None: ...
    def stopAll(self) -> None: ...

class ALRobotPosture:
    def goToPosture(self, posture: str, duration: float) -> None: ...

class ALLeds:
    def fadeRGB(
        self, ledType: Literal["FaceLeds"], color: Union[int, str], fadeDuration: float
    ) -> None: ...

class ALSignal:
    def connect(self, handler: Callable[[Any], None]) -> None: ...

class ALSubscriber:
    signal: ALSignal

class ALMemory:
    def subscribeToEvent(
        self, name: str, callbackModule: str, callbackMethod: str
    ) -> None: ...
    def unsubscribeToEvent(self, name: str, callbackModule: str) -> None: ...
    def subscriber(self, name: str) -> ALSubscriber: ...

class ALModule:
    def __init__(self, name: str) -> None: ...

class ALSoundDetection:
    def subscribe(self, name: str) -> None: ...
    def unsubscribe(self, name: str) -> None: ...
    def setParameter(self, name: str, value: float) -> None: ...

class ALBroker:
    def __init__(
        self, name: str, ip: str, port: int, parentBroker: str, parentPort: int
    ) -> None: ...
    def shutdown(self) -> None: ...

class ALTextToSpeech:
    def say(self, text: str) -> None: ...
